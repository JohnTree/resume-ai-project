import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  ActivityIndicator,
  Switch,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../types';
import { LinearGradient } from 'expo-linear-gradient';
import { useUser } from '../context/UserContext';
import AndroidPaymentService from '../services/AndroidPaymentService';
// import RealPaymentService from '../services/RealPaymentService';

type ProUpgradeNavigationProp = StackNavigationProp<RootStackParamList, 'ProUpgrade'>;

interface Props {
  navigation: ProUpgradeNavigationProp;
}

interface PricingPlan {
  id: string;
  name: string;
  price: string;
  originalPrice?: string;
  period: string;
  discount?: string;
  popular?: boolean;
  features: string[];
}

export default function ProUpgradeScreen({ navigation }: Props) {
  const { upgradeToPro } = useUser();
  const [selectedPlan, setSelectedPlan] = useState('yearly');
  const [isProcessing, setIsProcessing] = useState(false);
  const [useRealPayment, setUseRealPayment] = useState(false);
  const [paymentInitialized, setPaymentInitialized] = useState(false);
  
  // Ê£ÄÊü•ÊòØÂê¶Âú® Expo Go ÁéØÂ¢É‰∏≠
  const isExpoGo = __DEV__ && !process.env.EAS_BUILD;

  const pricingPlans: PricingPlan[] = [
    {
      id: 'monthly',
      name: 'ÊúàÂ∫¶‰ºöÂëò',
      price: '¬•19.9',
      period: 'ÊØèÊúà',
      features: [
        'Ëß£ÈîÅÊâÄÊúâÈ´òÁ∫ßÊ®°Êùø',
        'AIÊô∫ËÉΩ‰ºòÂåñ',
        'PDFÂØºÂá∫ÂäüËÉΩ',
        'Â§ö‰ªΩÁÆÄÂéÜÁÆ°ÁêÜ',
        '‰ºòÂÖàÂÆ¢ÊúçÊîØÊåÅ'
      ]
    },
    {
      id: 'yearly',
      name: 'Âπ¥Â∫¶‰ºöÂëò',
      price: '¬•99.9',
      originalPrice: '¬•238.8',
      period: 'ÊØèÂπ¥',
      discount: 'ËäÇÁúÅ58%',
      popular: true,
      features: [
        'ÂåÖÂê´ÊúàÂ∫¶‰ºöÂëòÊâÄÊúâÂäüËÉΩ',
        'Âπ¥Â∫¶‰∏ìÂ±ûÊ®°Êùø',
        'ÁÆÄÂéÜÊï∞ÊçÆÂàÜÊûêÊä•Âëä',
        'Ê±ÇËÅåÊåáÂØºËµÑÊñô',
        '1ÂØπ1ÁÆÄÂéÜ‰ºòÂåñÂí®ËØ¢'
      ]
    },
    {
      id: 'lifetime',
      name: 'ÁªàË∫´‰ºöÂëò',
      price: '¬•299.9',
      originalPrice: '¬•1194',
      period: '‰∏ÄÊ¨°ÊÄß‰ªòË¥π',
      discount: 'ÈôêÊó∂75Êäò',
      features: [
        'ÂåÖÂê´Âπ¥Â∫¶‰ºöÂëòÊâÄÊúâÂäüËÉΩ',
        'ÁªàË∫´ÂÖçË¥πÊõ¥Êñ∞',
        'Êñ∞ÂäüËÉΩÊä¢ÂÖà‰ΩìÈ™å',
        '‰∏ìÂ±ûVIPÂÆ¢Êúç',
        'ÁÆÄÂéÜÊ®°ÊùøÂÆöÂà∂ÊúçÂä°'
      ]
    }
  ];

  const proFeatures = [
    {
      icon: 'document-text-outline',
      title: 'È´òÁ∫ßÊ®°Êùø',
      description: '50+ Á≤æÁæé‰∏ì‰∏öÊ®°ÊùøÔºåÊ∂µÁõñÂêÑË°åÂêÑ‰∏ö'
    },
    {
      icon: 'sparkles-outline',
      title: 'AIÊô∫ËÉΩ‰ºòÂåñ',
      description: 'Âü∫‰∫éÂ§ßÊï∞ÊçÆÁöÑÁÆÄÂéÜÂÜÖÂÆπÊô∫ËÉΩ‰ºòÂåñÂª∫ËÆÆ'
    },
    {
      icon: 'download-outline',
      title: 'PDFÂØºÂá∫',
      description: 'È´òÊ∏ÖPDFÂØºÂá∫ÔºåÊîØÊåÅËá™ÂÆö‰πâÊ∞¥Âç∞'
    },
    {
      icon: 'folder-outline',
      title: 'Â§ö‰ªΩÁÆÄÂéÜ',
      description: 'ÂàõÂª∫ÂíåÁÆ°ÁêÜÂ§ö‰ªΩÈíàÂØπÊÄßÁÆÄÂéÜ'
    },
    {
      icon: 'analytics-outline',
      title: 'Êï∞ÊçÆÂàÜÊûê',
      description: 'ÁÆÄÂéÜÊµèËßàÊï∞ÊçÆÂíåÊ±ÇËÅåÊàêÂäüÁéáÂàÜÊûê'
    },
    {
      icon: 'headset-outline',
      title: '‰∏ìÂ±ûÂÆ¢Êúç',
      description: '7x24Â∞èÊó∂‰∏ìÂ±ûÂÆ¢ÊúçÊîØÊåÅ'
    }
  ];

  // ÂàùÂßãÂåñÊîØ‰ªòÊúçÂä°
  useEffect(() => {
    const initializePayment = async () => {
      if (useRealPayment && !isExpoGo) {
        console.log('üîÑ Initializing real payment service...');
        try {
          const RealPaymentService = require('../services/RealPaymentService').default;
          const initialized = await RealPaymentService.initialize();
          setPaymentInitialized(initialized);
          
          if (initialized) {
            // Ëé∑Âèñ‰∫ßÂìÅËØ¶ÊÉÖÁî®‰∫éË∞ÉËØï
            await RealPaymentService.getProductDetails();
          } else {
            Alert.alert('ÊîØ‰ªòÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•', 'ËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊàñÁ®çÂêéÈáçËØï');
          }
        } catch (error) {
          console.error('Payment service initialization failed:', error);
          setPaymentInitialized(false);
        }
      } else if (useRealPayment && isExpoGo) {
        Alert.alert(
          '‰∏çÊîØÊåÅÁúüÂÆûÊîØ‰ªò',
          'Expo Go ÁéØÂ¢É‰∏çÊîØÊåÅÁúüÂÆûÊîØ‰ªòÂäüËÉΩÔºåËØ∑‰ΩøÁî®Ê®°ÊãüÊîØ‰ªòÊ®°ÂºèËøõË°åÊµãËØï„ÄÇ\n\nË¶Å‰ΩøÁî®ÁúüÂÆûÊîØ‰ªòÔºåÈúÄË¶ÅÊûÑÂª∫Áã¨Á´ãÁöÑ App„ÄÇ',
          [{ text: 'Áü•ÈÅì‰∫Ü', onPress: () => setUseRealPayment(false) }]
        );
      }
    };
    
    initializePayment();
  }, [useRealPayment, isExpoGo]);

  const handlePurchase = async () => {
    if (isProcessing) return;
    
    setIsProcessing(true);
    
    try {
      let result;
      
      if (useRealPayment && !isExpoGo) {
        // ‰ΩøÁî®ÁúüÂÆûÊîØ‰ªò
        console.log(`üõí Starting real purchase for: ${selectedPlan}`);
        
        if (Platform.OS === 'android') {
          // AndroidÂπ≥Âè∞ - ‰ΩøÁî®ÂæÆ‰ø°ÊîØ‰ªò/ÊîØ‰ªòÂÆù
          try {
            result = await AndroidPaymentService.showPaymentOptions(selectedPlan);
            
            if (result.success) {
              // Êõ¥Êñ∞Áî®Êà∑ProÁä∂ÊÄÅ
              const upgraded = await upgradeToPro(selectedPlan);
              
              if (upgraded) {
                Alert.alert(
                  'üéâ Ë¥≠‰π∞ÊàêÂäüÔºÅ',
                  'ÊÅ≠ÂñúÊÇ®Êàê‰∏∫Pro‰ºöÂëòÔºåÁé∞Âú®ÂèØ‰ª•‰∫´ÂèóÊâÄÊúâÈ´òÁ∫ßÂäüËÉΩÔºÅ',
                  [
                    {
                      text: 'ÂºÄÂßã‰ΩøÁî®',
                      onPress: () => navigation.goBack()
                    }
                  ]
                );
              } else {
                Alert.alert('ÂçáÁ∫ßÂ§±Ë¥•', 'ÊîØ‰ªòÊàêÂäü‰ΩÜÂçáÁ∫ßÂ§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç');
              }
            } else if (result.message !== 'Áî®Êà∑ÂèñÊ∂àÊîØ‰ªò') {
              Alert.alert('Ë¥≠‰π∞Â§±Ë¥•', result.message || 'ËØ∑Á®çÂêéÈáçËØïÊàñËÅîÁ≥ªÂÆ¢Êúç');
            }
          } catch (error) {
            console.error('Android payment error:', error);
            Alert.alert('Ë¥≠‰π∞Â§±Ë¥•', 'ÊîØ‰ªòÊúçÂä°‰∏çÂèØÁî®ÔºåËØ∑Ê£ÄÊü•ÂæÆ‰ø°ÂíåÊîØ‰ªòÂÆùÊòØÂê¶Â∑≤ÂÆâË£Ö');
          }
        } else {
          // iOSÂπ≥Âè∞ - ‰ΩøÁî®App StoreÂÜÖË¥≠
          try {
            const RealPaymentService = require('../services/RealPaymentService').default;
            result = await RealPaymentService.purchaseProduct(selectedPlan);
            
            if (result.success) {
              // Êõ¥Êñ∞Áî®Êà∑ProÁä∂ÊÄÅ
              const upgraded = await upgradeToPro(selectedPlan);
              
              if (upgraded) {
                Alert.alert(
                  'üéâ Ë¥≠‰π∞ÊàêÂäüÔºÅ',
                  'ÊÅ≠ÂñúÊÇ®Êàê‰∏∫Pro‰ºöÂëòÔºåÁé∞Âú®ÂèØ‰ª•‰∫´ÂèóÊâÄÊúâÈ´òÁ∫ßÂäüËÉΩÔºÅ',
                  [
                    {
                      text: 'ÂºÄÂßã‰ΩøÁî®',
                      onPress: () => navigation.goBack()
                    }
                  ]
                );
              } else {
                Alert.alert('ÂçáÁ∫ßÂ§±Ë¥•', 'ÊîØ‰ªòÊàêÂäü‰ΩÜÂçáÁ∫ßÂ§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç');
              }
            } else {
              Alert.alert('Ë¥≠‰π∞Â§±Ë¥•', result.error || 'ËØ∑Á®çÂêéÈáçËØïÊàñËÅîÁ≥ªÂÆ¢Êúç');
            }
          } catch (error) {
            console.error('iOS payment error:', error);
            Alert.alert('Ë¥≠‰π∞Â§±Ë¥•', 'App StoreÊîØ‰ªòÊúçÂä°‰∏çÂèØÁî®');
          }
        }
      } else {
        // ‰ΩøÁî®Ê®°ÊãüÊîØ‰ªò
        console.log(`üé≠ Starting simulated purchase for: ${selectedPlan}`);
        
        if (Platform.OS === 'android') {
          // AndroidÊ®°ÊãüÊîØ‰ªò - ÊòæÁ§∫ÊîØ‰ªòÈÄâÈ°π
          result = await AndroidPaymentService.showPaymentOptions(selectedPlan);
          
          if (result.success) {
            const upgraded = await upgradeToPro(selectedPlan);
            
            if (upgraded) {
              Alert.alert(
                'üéâ Ë¥≠‰π∞ÊàêÂäüÔºÅÔºàÊ®°ÊãüÔºâ',
                `${result.message}\n\nÊ≥®ÊÑèÔºöËøôÊòØÊ®°ÊãüË¥≠‰π∞ÔºåÊú™ÂÆûÈôÖÊâ£Ë¥π„ÄÇ`,
                [
                  {
                    text: 'ÂºÄÂßã‰ΩøÁî®',
                    onPress: () => navigation.goBack()
                  }
                ]
              );
            } else {
              Alert.alert('ÂçáÁ∫ßÂ§±Ë¥•', 'Ê®°ÊãüÊîØ‰ªòÊàêÂäü‰ΩÜÂçáÁ∫ßÂ§±Ë¥•');
            }
          } else if (result.message !== 'Áî®Êà∑ÂèñÊ∂àÊîØ‰ªò') {
            Alert.alert('Ê®°ÊãüÊîØ‰ªòÂ§±Ë¥•', result.message);
          }
        } else {
          // iOSÊ®°ÊãüÊîØ‰ªò
          await simulatePayment();
          
          const upgraded = await upgradeToPro(selectedPlan);
          
          if (upgraded) {
            Alert.alert(
              'üéâ Ë¥≠‰π∞ÊàêÂäüÔºÅÔºàÊ®°ÊãüÔºâ',
              'ÊÅ≠ÂñúÊÇ®Êàê‰∏∫Pro‰ºöÂëòÔºåÁé∞Âú®ÂèØ‰ª•‰∫´ÂèóÊâÄÊúâÈ´òÁ∫ßÂäüËÉΩÔºÅ\n\nÊ≥®ÊÑèÔºöËøôÊòØÊ®°ÊãüË¥≠‰π∞ÔºåÊú™ÂÆûÈôÖÊâ£Ë¥π„ÄÇ',
              [
                {
                  text: 'ÂºÄÂßã‰ΩøÁî®',
                  onPress: () => navigation.goBack()
                }
              ]
            );
          } else {
            Alert.alert('ÂçáÁ∫ßÂ§±Ë¥•', 'Ê®°ÊãüÊîØ‰ªòÊàêÂäü‰ΩÜÂçáÁ∫ßÂ§±Ë¥•');
          }
        }
      }
    } catch (error: any) {
      console.error('‚ùå Purchase error:', error);
      Alert.alert('Ë¥≠‰π∞Â§±Ë¥•', error.message || 'ËØ∑Á®çÂêéÈáçËØïÊàñËÅîÁ≥ªÂÆ¢Êúç');
    } finally {
      setIsProcessing(false);
    }
  };

  const simulatePayment = () => {
    return new Promise((resolve) => {
      setTimeout(resolve, 2000);
    });
  };

  const handleRestore = async () => {
    if (useRealPayment && paymentInitialized && !isExpoGo) {
      Alert.alert('ÊÅ¢Â§çË¥≠‰π∞', 'Ê≠£Âú®Ê£ÄÊü•ÊÇ®ÁöÑË¥≠‰π∞ËÆ∞ÂΩï...', [
        { text: 'ÂèñÊ∂à', style: 'cancel' }
      ]);
      
      try {
        const RealPaymentService = require('../services/RealPaymentService').default;
        const result = await RealPaymentService.restorePurchases();
        
        if (result.success) {
          // Êõ¥Êñ∞Áî®Êà∑ProÁä∂ÊÄÅ
          const productId = result.productId || 'yearly'; // ÈªòËÆ§Âπ¥Â∫¶
          const localProductId = getLocalProductId(productId);
          const upgraded = await upgradeToPro(localProductId);
          
          if (upgraded) {
            Alert.alert('ÊÅ¢Â§çÊàêÂäü', 'ÊÇ®ÁöÑPro‰ºöÂëòÂ∑≤ÊÅ¢Â§çÔºÅ');
          } else {
            Alert.alert('ÊÅ¢Â§çÂ§±Ë¥•', 'ÊâæÂà∞Ë¥≠‰π∞ËÆ∞ÂΩï‰ΩÜÊÅ¢Â§çÂ§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç');
          }
        } else {
          Alert.alert('ÊÅ¢Â§çÂ§±Ë¥•', result.error || 'Ê≤°ÊúâÊâæÂà∞ÊúâÊïàÁöÑË¥≠‰π∞ËÆ∞ÂΩï');
        }
      } catch (error: any) {
        console.error('Restore purchase error:', error);
        Alert.alert('ÊÅ¢Â§çÂ§±Ë¥•', 'ÊîØ‰ªòÊúçÂä°‰∏çÂèØÁî®');
      }
    } else {
      Alert.alert('ÊÅ¢Â§çË¥≠‰π∞', isExpoGo ? 'Expo Go ÁéØÂ¢É‰∏çÊîØÊåÅÊÅ¢Â§çË¥≠‰π∞ÂäüËÉΩ' : 'Ê®°ÊãüÊ®°Âºè‰∏ãÊó†Ê≥ïÊÅ¢Â§çË¥≠‰π∞');
    }
  };

  // Â∞ÜÂïÜÂ∫ó‰∫ßÂìÅIDËΩ¨Êç¢‰∏∫Êú¨Âú∞‰∫ßÂìÅID
  const getLocalProductId = (storeProductId: string): string => {
    if (storeProductId.includes('monthly')) return 'monthly';
    if (storeProductId.includes('yearly')) return 'yearly';
    if (storeProductId.includes('lifetime')) return 'lifetime';
    return 'yearly'; // ÈªòËÆ§
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* ÂºÄÂèëËÄÖË∞ÉËØïÈù¢Êùø */}
        <View style={styles.debugPanel}>
          <View style={styles.debugRow}>
            <Text style={styles.debugLabel}>
              {useRealPayment ? 'üî¥ ÁúüÂÆûÊîØ‰ªòÊ®°Âºè' : 'üü° Ê®°ÊãüÊîØ‰ªòÊ®°Âºè'}
            </Text>
            <Switch
              value={useRealPayment}
              onValueChange={setUseRealPayment}
              trackColor={{ false: '#cbd5e1', true: '#10b981' }}
              thumbColor={useRealPayment ? '#ffffff' : '#f4f3f4'}
            />
          </View>
          {useRealPayment && (
            <Text style={styles.debugStatus}>
              {isExpoGo 
                ? '‚ö†Ô∏è Expo Go ‰∏çÊîØÊåÅÁúüÂÆûÊîØ‰ªò' 
                : Platform.OS === 'android'
                  ? 'ü§ñ Android: ÂæÆ‰ø°ÊîØ‰ªò + ÊîØ‰ªòÂÆù'
                  : paymentInitialized 
                    ? 'üçé iOS: App Store ÂÜÖË¥≠Â∑≤Â∞±Áª™' 
                    : '‚è≥ Ê≠£Âú®ÂàùÂßãÂåñ iOS ÊîØ‰ªòÊúçÂä°...'
              }
            </Text>
          )}
          {!useRealPayment && (
            <Text style={styles.debugStatus}>
              üí° Ê®°ÊãüÊ®°ÂºèÔºö{Platform.OS === 'android' ? 'ÊòæÁ§∫ÊîØ‰ªòÈÄâÈ°π‰ΩÜ‰∏çÊâ£Ë¥π' : '‰∏ç‰ºöÂÆûÈôÖÊâ£Ë¥πÔºåÁî®‰∫éÂºÄÂèëÊµãËØï'}
            </Text>
          )}
        </View>

        {/* Â§¥ÈÉ® */}
        <LinearGradient
          colors={['#6366f1', '#8b5cf6']}
          style={styles.header}
        >
          <TouchableOpacity 
            style={styles.closeButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="close" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerContent}>
            <View style={styles.crownContainer}>
              <Text style={styles.crownIcon}>üëë</Text>
            </View>
            <Text style={styles.headerTitle}>ÂçáÁ∫ßÂà∞ Pro</Text>
            <Text style={styles.headerSubtitle}>
              Ëß£ÈîÅÊâÄÊúâÈ´òÁ∫ßÂäüËÉΩÔºåËÆ©ÊÇ®ÁöÑÁÆÄÂéÜËÑ±È¢ñËÄåÂá∫
            </Text>
          </View>
        </LinearGradient>

        {/* ÂäüËÉΩÁâπÊÄß */}
        <View style={styles.featuresSection}>
          <Text style={styles.sectionTitle}>Pro ‰ºöÂëòÁâπÊùÉ</Text>
          <View style={styles.featuresGrid}>
            {proFeatures.map((feature, index) => (
              <View key={index} style={styles.featureCard}>
                <View style={styles.featureIcon}>
                  <Ionicons name={feature.icon as any} size={24} color="#6366f1" />
                </View>
                <Text style={styles.featureTitle}>{feature.title}</Text>
                <Text style={styles.featureDescription}>{feature.description}</Text>
              </View>
            ))}
          </View>
        </View>

        {/* ‰ª∑Ê†ºÊñπÊ°à */}
        <View style={styles.pricingSection}>
          <Text style={styles.sectionTitle}>ÈÄâÊã©ÊÇ®ÁöÑÊñπÊ°à</Text>
          
          {pricingPlans.map((plan) => (
            <TouchableOpacity
              key={plan.id}
              style={[
                styles.pricingCard,
                selectedPlan === plan.id && styles.pricingCardSelected,
                plan.popular && styles.pricingCardPopular
              ]}
              onPress={() => setSelectedPlan(plan.id)}
            >
              {plan.popular && (
                <View style={styles.popularBadge}>
                  <Text style={styles.popularBadgeText}>ÊúÄÂèóÊ¨¢Ëøé</Text>
                </View>
              )}
              
              <View style={styles.pricingHeader}>
                <View>
                  <Text style={styles.planName}>{plan.name}</Text>
                  <View style={styles.priceContainer}>
                    <Text style={styles.price}>{plan.price}</Text>
                    <Text style={styles.period}>/{plan.period}</Text>
                    {plan.originalPrice && (
                      <Text style={styles.originalPrice}>{plan.originalPrice}</Text>
                    )}
                  </View>
                  {plan.discount && (
                    <Text style={styles.discount}>{plan.discount}</Text>
                  )}
                </View>
                
                <View style={[
                  styles.radioButton,
                  selectedPlan === plan.id && styles.radioButtonSelected
                ]}>
                  {selectedPlan === plan.id && (
                    <View style={styles.radioButtonInner} />
                  )}
                </View>
              </View>
              
              <View style={styles.featuresContainer}>
                {plan.features.map((feature, index) => (
                  <View key={index} style={styles.featureItem}>
                    <Ionicons name="checkmark-circle" size={16} color="#10b981" />
                    <Text style={styles.featureText}>{feature}</Text>
                  </View>
                ))}
              </View>
            </TouchableOpacity>
          ))}
        </View>

        {/* Ë¥≠‰π∞ÊåâÈíÆ */}
        <View style={styles.purchaseSection}>
          <TouchableOpacity
            style={[styles.purchaseButton, isProcessing && styles.purchaseButtonDisabled]}
            onPress={handlePurchase}
            disabled={isProcessing}
          >
            {isProcessing ? (
              <ActivityIndicator color="white" />
            ) : (
              <>
                <Ionicons name="card-outline" size={20} color="white" />
                <Text style={styles.purchaseButtonText}>
                  Á´ãÂç≥Ë¥≠‰π∞ {pricingPlans.find(p => p.id === selectedPlan)?.price}
                </Text>
              </>
            )}
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.restoreButton} onPress={handleRestore}>
            <Text style={styles.restoreButtonText}>ÊÅ¢Â§çË¥≠‰π∞</Text>
          </TouchableOpacity>
          
          <View style={styles.disclaimer}>
            <Text style={styles.disclaimerText}>
              ‚Ä¢ ËÆ¢ÈòÖÂ∞ÜËá™Âä®Áª≠Ë¥πÔºåÂèØÈöèÊó∂Âú®ËÆæÁΩÆ‰∏≠ÂèñÊ∂à
            </Text>
            <Text style={styles.disclaimerText}>
              ‚Ä¢ ÊîØÊåÅ7Â§©Êó†ÁêÜÁî±ÈÄÄÊ¨æ
            </Text>
            <Text style={styles.disclaimerText}>
              ‚Ä¢ Ë¥≠‰π∞Âç≥Ë°®Á§∫ÂêåÊÑè„ÄäÊúçÂä°Êù°Ê¨æ„ÄãÂíå„ÄäÈöêÁßÅÊîøÁ≠ñ„Äã
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    paddingTop: 20,
    paddingBottom: 40,
    paddingHorizontal: 20,
  },
  closeButton: {
    alignSelf: 'flex-end',
    padding: 8,
  },
  headerContent: {
    alignItems: 'center',
    marginTop: 20,
  },
  crownContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  crownIcon: {
    fontSize: 40,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.9)',
    textAlign: 'center',
    lineHeight: 22,
  },
  featuresSection: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 20,
    textAlign: 'center',
  },
  featuresGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  featureCard: {
    width: '48%',
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  featureIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#f1f5f9',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  featureTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
    textAlign: 'center',
  },
  featureDescription: {
    fontSize: 12,
    color: '#64748b',
    textAlign: 'center',
    lineHeight: 16,
  },
  pricingSection: {
    padding: 20,
    paddingTop: 0,
  },
  pricingCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    borderWidth: 2,
    borderColor: '#e2e8f0',
    position: 'relative',
  },
  pricingCardSelected: {
    borderColor: '#6366f1',
  },
  pricingCardPopular: {
    borderColor: '#f59e0b',
  },
  popularBadge: {
    position: 'absolute',
    top: -8,
    left: 20,
    backgroundColor: '#f59e0b',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  popularBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  pricingHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  planName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'baseline',
    marginBottom: 4,
  },
  price: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#6366f1',
  },
  period: {
    fontSize: 14,
    color: '#64748b',
    marginLeft: 4,
  },
  originalPrice: {
    fontSize: 14,
    color: '#94a3b8',
    textDecorationLine: 'line-through',
    marginLeft: 8,
  },
  discount: {
    fontSize: 12,
    color: '#10b981',
    fontWeight: '600',
  },
  radioButton: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#d1d5db',
    justifyContent: 'center',
    alignItems: 'center',
  },
  radioButtonSelected: {
    borderColor: '#6366f1',
  },
  radioButtonInner: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#6366f1',
  },
  featuresContainer: {
    gap: 8,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  featureText: {
    fontSize: 14,
    color: '#374151',
    flex: 1,
  },
  purchaseSection: {
    padding: 20,
    paddingTop: 0,
  },
  purchaseButton: {
    backgroundColor: '#6366f1',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 8,
    marginBottom: 16,
  },
  purchaseButtonDisabled: {
    backgroundColor: '#94a3b8',
  },
  purchaseButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  restoreButton: {
    alignItems: 'center',
    paddingVertical: 12,
    marginBottom: 20,
  },
  restoreButtonText: {
    color: '#6366f1',
    fontSize: 14,
    fontWeight: '500',
  },
  disclaimer: {
    gap: 4,
  },
  disclaimerText: {
    fontSize: 12,
    color: '#64748b',
    textAlign: 'center',
    lineHeight: 16,
  },
  debugPanel: {
    backgroundColor: '#f1f5f9',
    margin: 20,
    marginBottom: 0,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  debugRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  debugLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  debugStatus: {
    fontSize: 12,
    color: '#6b7280',
    fontStyle: 'italic',
  },
});